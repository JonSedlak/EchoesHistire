{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ASSETS } from \"../constants/theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar mapImageOne = ASSETS.photo1;\nvar mapImageTwo = ASSETS.photo2;\nvar Maps = function Maps() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isMapOne = _useState2[0],\n    setIsMapOne = _useState2[1];\n  var toggleMap = function toggleMap() {\n    setIsMapOne(!isMapOne);\n  };\n  var mapImage = isMapOne ? mapImageOne : mapImageTwo;\n  var mapName = isMapOne ? \"Present\" : \"Past\";\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: mapImage,\n      style: styles.mapImage\n    }), _jsx(View, {\n      style: styles.buttonContainer,\n      children: _jsx(TouchableOpacity, {\n        style: styles.button,\n        onPress: toggleMap,\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: mapName\n        })\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  mapImage: {\n    width: '100%',\n    height: '100%',\n    resizeMode: 'contain'\n  },\n  buttonContainer: {\n    position: 'absolute',\n    bottom: 20\n  },\n  button: {\n    backgroundColor: 'white',\n    width: 100,\n    height: 40,\n    borderRadius: 5,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonText: {\n    color: 'black',\n    fontWeight: 'bold'\n  }\n});\nexport default Maps;","map":{"version":3,"names":["React","useState","View","TouchableOpacity","Text","StyleSheet","Image","ASSETS","jsx","_jsx","jsxs","_jsxs","mapImageOne","photo1","mapImageTwo","photo2","Maps","_useState","_useState2","_slicedToArray","isMapOne","setIsMapOne","toggleMap","mapImage","mapName","style","styles","container","children","source","buttonContainer","button","onPress","buttonText","create","flex","alignItems","width","height","resizeMode","position","bottom","backgroundColor","borderRadius","justifyContent","color","fontWeight"],"sources":["/Users/felipebassi/Documents/VAR-Labs-App/Behrend-Immersive-App/src/screens/Maps.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, TouchableOpacity, Text, StyleSheet, Image } from 'react-native';\nimport { ASSETS } from '../constants/theme';\n\nconst mapImageOne = ASSETS.photo1;\nconst mapImageTwo = ASSETS.photo2;\n\nconst Maps = () => {\n  const [isMapOne, setIsMapOne] = useState(true);\n\n  const toggleMap = () => {\n    setIsMapOne(!isMapOne);\n  };\n\n  const mapImage = isMapOne ? mapImageOne : mapImageTwo;\n  const mapName = isMapOne ? \"Present\" : \"Past\";\n\n  return (\n    <View style={styles.container}>\n      <Image source={mapImage} style={styles.mapImage} />\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity style={styles.button} onPress={toggleMap}>\n          <Text style={styles.buttonText}>{mapName}</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  mapImage: {\n    width: '100%',\n    height: '100%',\n    resizeMode: 'contain',\n  },\n  buttonContainer: {\n    position: 'absolute',\n    bottom: 20,\n  },\n  button: {\n    backgroundColor: 'white',\n    width: 100,\n    height: 40,\n    borderRadius: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'black',\n    fontWeight: 'bold',\n  },\n});\n\nexport default Maps;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAExC,SAASC,MAAM;AAA6B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5C,IAAMC,WAAW,GAAGL,MAAM,CAACM,MAAM;AACjC,IAAMC,WAAW,GAAGP,MAAM,CAACQ,MAAM;AAEjC,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;EACjB,IAAAC,SAAA,GAAgChB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACtBD,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;EAED,IAAMG,QAAQ,GAAGH,QAAQ,GAAGR,WAAW,GAAGE,WAAW;EACrD,IAAMU,OAAO,GAAGJ,QAAQ,GAAG,SAAS,GAAG,MAAM;EAE7C,OACET,KAAA,CAACT,IAAI;IAACuB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BnB,IAAA,CAACH,KAAK;MAACuB,MAAM,EAAEN,QAAS;MAACE,KAAK,EAAEC,MAAM,CAACH;IAAS,CAAE,CAAC,EACnDd,IAAA,CAACP,IAAI;MAACuB,KAAK,EAAEC,MAAM,CAACI,eAAgB;MAAAF,QAAA,EAClCnB,IAAA,CAACN,gBAAgB;QAACsB,KAAK,EAAEC,MAAM,CAACK,MAAO;QAACC,OAAO,EAAEV,SAAU;QAAAM,QAAA,EACzDnB,IAAA,CAACL,IAAI;UAACqB,KAAK,EAAEC,MAAM,CAACO,UAAW;UAAAL,QAAA,EAAEJ;QAAO,CAAO;MAAC,CAChC;IAAC,CACf,CAAC;EAAA,CACH,CAAC;AAEX,CAAC;AAED,IAAME,MAAM,GAAGrB,UAAU,CAAC6B,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE;EACd,CAAC;EACDb,QAAQ,EAAE;IACRc,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,MAAM;IACdC,UAAU,EAAE;EACd,CAAC;EACDT,eAAe,EAAE;IACfU,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE;EACV,CAAC;EACDV,MAAM,EAAE;IACNW,eAAe,EAAE,OAAO;IACxBL,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,EAAE;IACVK,YAAY,EAAE,CAAC;IACfC,cAAc,EAAE,QAAQ;IACxBR,UAAU,EAAE;EACd,CAAC;EACDH,UAAU,EAAE;IACVY,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe9B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}