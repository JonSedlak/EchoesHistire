{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/felipebassi/Documents/VAR-Labs-App/Behrend-Immersive-App/src/constants/types/components.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  ColorValue,\n  ImageProps,\n  ImageStyle,\n  KeyboardAvoidingViewProps,\n  ModalProps,\n  ScrollViewProps,\n  StyleProp,\n  TextInputProps,\n  TextProps,\n  TextStyle,\n  TouchableOpacityProps,\n  ViewProps,\n  ViewStyle,\n} from 'react-native';\nimport {BlurProps} from 'expo-blur';\nimport {LinearGradientPoint} from 'expo-linear-gradient';\nimport {ISpacing, ITheme} from './theme';\n\n/**\n * ## Block\n * Default usage:\n * ```\n * <Block>...</Block>\n * ```\n *\n */\nexport interface IBlockProps\n  extends ISpacing,\n    ViewProps,\n    ScrollViewProps,\n    KeyboardAvoidingViewProps {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Renders a View flex style\n   * @see https://reactnative.dev/docs/flexbox#proptypes\n   * @see https://reactnative.dev/docs/layout-props\n   */\n  flex?: ViewStyle['flex'];\n  /**\n   * Renders a View flexDirection: row style\n   * @see https://reactnative.dev/docs/flexbox#flex-direction\n   */\n  row?: boolean;\n  /**\n   * Renders a View flexWrap style\n   * @see https://reactnative.dev/docs/flexbox#flex-wrap\n   */\n  wrap?: ViewStyle['flexWrap'];\n  /**\n   * Renders a SafeAreaView component\n   * @see https://reactnative.dev/docs/safeareaview\n   */\n  safe?: boolean;\n  /**\n   * Renders a KeyboardAwareScrollView component\n   * @see https://github.com/APSL/react-native-keyboard-aware-scroll-view#usage\n   */\n  keyboard?: boolean;\n  /**\n   * Renders a ScrollView component\n   * @see https://reactnative.dev/docs/scrollview\n   */\n  scroll?: boolean;\n  /**\n   * Generates a shadow style\n   * @see https://reactnative.dev/docs/shadow-props\n   */\n  shadow?: boolean;\n  /**\n   * Renders a View with predefined backgroundColor, borderRadius, padding, shadow / elevation\n   * @see https://reactnative.dev/docs/shadow-props\n   */\n  card?: boolean;\n  /**\n   * Renders a View with predefined justifyContent: center\n   * @see https://reactnative.dev/docs/flexbox#justify-content\n   */\n  center?: boolean;\n  /**\n   * Renders a View with predefined borderWidth: 1, backgroundColor: 'transparent' & borderColor inherited\n   */\n  outlined?: boolean;\n  /**\n   * Renders the View/Block component with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/view#style\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Renders a View style overflow\n   * @see https://reactnative.dev/docs/layout-props#overflow\n   */\n  overflow?: ViewStyle['overflow'];\n  /**\n   * Renders a custom backgroundColor\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  color?: ViewStyle['backgroundColor'];\n  /**\n   * Renders LinearGradient component, colors\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  gradient?: string[];\n  /**\n   * Renders a backgroundColor directly from the colors.primary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  primary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.secondary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  secondary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.tertiary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  tertiary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.black value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  black?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.white value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  white?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.gray value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  gray?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.danger value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  danger?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.warning value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  warning?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.success value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  success?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.info value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  info?: boolean;\n  /**\n   * Renders a custom borderRadius value\n   * @see https://reactnative.dev/docs/view-style-props#borderradius\n   */\n  radius?: ViewStyle['borderRadius'];\n  /**\n   * Renders a custom height value\n   * @see https://reactnative.dev/docs/layout-props#height\n   */\n  height?: ViewStyle['height'];\n  /**\n   * Renders a custom width value\n   * @see https://reactnative.dev/docs/layout-props#width\n   */\n  width?: ViewStyle['width'];\n  /**\n   * Renders a flex justifyContent\n   * Available values: 'flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'\n   * @see https://reactnative.dev/docs/layout-props#justifycontent\n   */\n  justify?: ViewStyle['justifyContent'];\n  /**\n   * Renders a flex alignItems\n   * Available values: 'auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline'\n   * @see https://reactnative.dev/docs/layout-props#alignitems\n   */\n  align?: ViewStyle['alignItems'];\n  /**\n   * Renders the View content\n   */\n  children?: React.ReactNode;\n  /**\n   * Renders a BlueView component\n   * @see https://docs.expo.io/versions/latest/sdk/blur-view/\n   */\n  blur?: boolean;\n  /**\n   * BlueView intensity, default: 50, values accepted: 1 to 100\n   * @see https://docs.expo.io/versions/latest/sdk/blur-view/#intensity\n   */\n  intensity?: BlurProps['intensity'];\n  /**\n   * BlueView tint color, default: 'default', values accepted: 'light', 'dark', 'default'\n   * @see https://docs.expo.io/versions/latest/sdk/blur-view/#blurtint\n   */\n  tint?: BlurProps['tint'];\n  /**\n   * Renders the View position\n   * @see https://reactnative.dev/docs/layout-props#position\n   */\n  position?: ViewStyle['position'];\n  /**\n   * Renders the View right offset\n   * @see https://reactnative.dev/docs/layout-props#right\n   */\n  right?: ViewStyle['right'];\n  /**\n   * Renders the View left offset\n   * @see https://reactnative.dev/docs/layout-props#left\n   */\n  left?: ViewStyle['left'];\n  /**\n   * Renders the View top offset\n   * @see https://reactnative.dev/docs/layout-props#top\n   */\n  top?: ViewStyle['top'];\n  /**\n   * Renders the View bottom offset\n   * @see https://reactnative.dev/docs/layout-props#bottom\n   */\n  bottom?: ViewStyle['bottom'];\n  /**\n   * Renders LinearGradient start points\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  start?: LinearGradientPoint;\n  /**\n   * Renders LinearGradient end points\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  end?: LinearGradientPoint;\n}\n\n/**\n * ## Button\n * Default usage:\n * ```\n * <Button>...</Button>\n * ```\n *\n */\nexport interface IButtonProps extends TouchableOpacityProps, ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Renders borderRadius value to maxSize / 2 using\n   * maxSize value is calculated from the maximum value from width, minWidth, maxWidth, height, minHeight, maxHeight\n   * @see https://reactnative.dev/docs/view-style-props#borderradius\n   */\n  round?: boolean;\n  /**\n   * Renders borderRadius value using theme sizes.s; default sizes.buttonRadius\n   * @see https://reactnative.dev/docs/view-style-props#borderradius\n   */\n  rounded?: boolean;\n  /**\n   * Renders a View flex style\n   * @see https://reactnative.dev/docs/flexbox#proptypes\n   * @see https://reactnative.dev/docs/layout-props\n   */\n  flex?: ViewStyle['flex'];\n  /**\n   * Renders a custom borderRadius value\n   * @see https://reactnative.dev/docs/view-style-props#borderradius\n   */\n  radius?: ViewStyle['borderRadius'];\n  /**\n   * Renders a custom backgroundColor value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  color?: ViewStyle['backgroundColor'];\n  /**\n   * Renders LinearGradient component, colors\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  gradient?: string[];\n  /**\n   * Renders a backgroundColor directly from the colors.primary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  primary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.secondary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  secondary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.tertiary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  tertiary?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.gray value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  gray?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.black value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  black?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.white value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  white?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.light value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  light?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.dark value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  dark?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.danger value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  danger?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.warning value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  warning?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.success value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  success?: boolean;\n  /**\n   * Renders a backgroundColor directly from the colors.info value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  info?: boolean;\n  /**\n   * Renders a View flexDirection: row style\n   * @see https://reactnative.dev/docs/flexbox#flex-direction\n   */\n  row?: boolean;\n  /**\n   * Renders a flex alignItems\n   * Available values: 'auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline'\n   * @see https://reactnative.dev/docs/layout-props#alignitems\n   */\n  align?: ViewStyle['alignItems'];\n  /**\n   * Renders a flex justifyContent\n   * Available values: 'flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'\n   * @see https://reactnative.dev/docs/layout-props#justifycontent\n   */\n  justify?: ViewStyle['justifyContent'];\n  /**\n   * Renders a custom height value\n   * @see https://reactnative.dev/docs/layout-props#height\n   */\n  height?: ViewStyle['height'];\n  /**\n   * Renders a custom width value\n   * @see https://reactnative.dev/docs/layout-props#width\n   */\n  width?: ViewStyle['width'];\n  /**\n   * Renders the container style with predefined borderWidth: 1, backgroundColor: 'transparent' & borderColor inherited\n   */\n  outlined?: boolean | string;\n  /**\n   * Generates a shadow style\n   * @see https://reactnative.dev/docs/shadow-props\n   */\n  shadow?: boolean;\n  /**\n   * Renders social icons ('logo-facebook', 'logo-twitter', 'logo-dribbble') from Ionicons\n   * @see https://docs.expo.io/guides/icons/\n   * @see https://icons.expo.fyi\n   */\n  social?: 'facebook' | 'twitter' | 'dribbble';\n  /**\n   * Renders the View position\n   * @see https://reactnative.dev/docs/layout-props#position\n   */\n  position?: ViewStyle['position'];\n  /**\n   * Renders the View right offset\n   * @see https://reactnative.dev/docs/layout-props#right\n   */\n  right?: ViewStyle['right'];\n  /**\n   * Renders the View left offset\n   * @see https://reactnative.dev/docs/layout-props#left\n   */\n  left?: ViewStyle['left'];\n  /**\n   * Renders the View top offset\n   * @see https://reactnative.dev/docs/layout-props#top\n   */\n  top?: ViewStyle['top'];\n  /**\n   * Renders the View bottom offset\n   * @see https://reactnative.dev/docs/layout-props#bottom\n   */\n  bottom?: ViewStyle['bottom'];\n  /**\n   * Provides haptic feedback on touch - Haptics.selectionAsync()\n   * @see https://docs.expo.io/versions/latest/sdk/haptics/\n   */\n  haptic?: boolean;\n  /**\n   * Adds vibration feedback on touch using Vibration.vibrate pattern\n   * @see https://reactnative.dev/docs/vibration\n   */\n  vibrate?: number | number[] | null;\n  /**\n   * Repeat vibration pattern\n   * @see https://reactnative.dev/docs/vibration\n   */\n  vibrateRepeat?: boolean | null;\n  /**\n   * Renders Button content\n   */\n  children?: React.ReactNode;\n}\n\n/**\n * ## Checkbox\n * Default usage:\n * ```\n * <Checkbox checked />\n * ```\n *\n */\nexport interface ICheckboxProps extends ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Checkbox checked value\n   */\n  checked?: boolean;\n  /**\n   * Provides haptic feedback when toggling the checkbox\n   * @see https://docs.expo.io/versions/latest/sdk/haptics/\n   */\n  haptic?: boolean;\n  /**\n   * Renders the Pressable container style\n   * @see https://reactnative.dev/docs/view#style\n   */\n  style?: ViewStyle;\n  /**\n   * Checkbox onPress callback passing the checked value as params\n   */\n  onPress?: (checked: boolean) => void;\n}\n\n/**\n * ## Image\n * Default usage:\n * ```\n * <Image source={...} />\n * ```\n *\n */\nexport interface IImageProps extends ImageProps, ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Avatar sizing: borderRadius from Math.min(height, weight)\n   * sets the width & height to Math.min(height, weight)\n   */\n  avatar?: boolean;\n  /**\n   * Generates a shadow style\n   * @see https://reactnative.dev/docs/shadow-props\n   */\n  shadow?: boolean;\n  /**\n   * Renders an ImageBackground component\n   * @see https://reactnative.dev/docs/imagebackground\n   */\n  background?: boolean;\n  /**\n   * Renders a predefined theme sizes.borderRadius & overflow: 'hidden'\n   * @see https://reactnative.dev/docs/image-style-props#borderradius\n   */\n  rounded?: boolean;\n  /**\n   * Renders a custom borderRadius value\n   * @see https://reactnative.dev/docs/image-style-props#borderradius\n   */\n  radius?: ImageStyle['borderRadius'];\n  /**\n   * Changes the color of all the non-transparent pixels to the tintColor.\n   * @see https://reactnative.dev/docs/image-style-props#tintcolor\n   */\n  color?: ImageStyle['tintColor'];\n  /**\n   * Modify the appearance and position of your components using 2D or 3D transformations\n   * @see https://reactnative.dev/docs/transforms#transform\n   */\n  transform?: ImageStyle['transform'];\n  /**\n   * Renders the Image component with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/image#style\n   */\n  style?: StyleProp<ImageStyle>;\n  /** Renders the ImageBackground content */\n  children?: React.ReactNode;\n}\n\n/**\n * ## Input\n * Default usage:\n * ```\n * <Input />\n * ```\n *\n */\nexport interface IInputProps extends TextInputProps, ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Renders a custom borderColor & placeholderTextColor\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  color?: ColorValue;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.primary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  primary?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.secondary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  secondary?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.tertiary value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  tertiary?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.black value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  black?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.white value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  white?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.gray value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  gray?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.danger value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  danger?: boolean;\n  /**\n   * Renders a right side danger icon for invalid input value\n   * Renders a borderColor & placeholderTextColor directly from the colors.warning value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  warning?: boolean;\n  /**\n   * Renders a borderColor & placeholderTextColor directly from the colors.success value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  success?: boolean;\n  /**\n   * Renders a right side success icon for valid input value\n   * Renders a borderColor & placeholderTextColor directly from the colors.info value\n   * @see https://reactnative.dev/docs/view-style-props#backgroundcolor\n   */\n  info?: boolean;\n  /**\n   * Renders a right side search icon\n   */\n  search?: boolean;\n  /**\n   * Renders a disabled / non-editable TextInput\n   * @see https://reactnative.dev/docs/textinput#editable\n   */\n  disabled?: boolean;\n  /**\n   * Renders the label top text\n   */\n  label?: string;\n  /**\n   * Renders a left side icon image from the Theme assets\n   */\n  icon?: keyof ITheme['assets'];\n  /**\n   * Renders the TextInput content\n   */\n  children?: React.ReactNode;\n  /**\n   * Renders the TextInput/Input component with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/textinput#style\n   */\n  style?: TextStyle;\n}\n\n/**\n * ## Modal\n * Default usage:\n * ```\n * <Modal visible>...</Modal>\n * ```\n *\n */\nexport interface IModalProps extends ModalProps {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Renders the Modal content\n   */\n  children?: React.ReactNode;\n  /**\n   * Renders the Text Modal with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/view#style\n   */\n  style?: ViewStyle;\n}\n\n/**\n * ## Switch\n * Default usage:\n * ```\n * <Switch checked />\n * ```\n *\n */\nexport interface ISwitchProps extends ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Switch checked value\n   */\n  checked?: boolean;\n  /**\n   * Renders the Switch component with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/view#style\n   */\n  style?: ViewStyle;\n  /**\n   * Renders the thumb color value\n   */\n  thumbColor?: ColorValue;\n  /**\n   * Renders the switch active thumb backgroundColor value\n   */\n  activeFillColor?: ColorValue;\n  /**\n   * Renders the switch inactive thumb backgroundColor value\n   */\n  inactiveFillColor?: ColorValue;\n  /**\n   * Renders the thumb style\n   * @see https://reactnative.dev/docs/view#style\n   */\n  thumbStyle?: ViewStyle;\n  /**\n   * Renders the switch container style\n   * @see https://reactnative.dev/docs/view#style\n   */\n  switchStyle?: ViewStyle;\n  /**\n   * Switch onPress callback passing the checked value as params\n   */\n  onPress?: (checked: boolean) => void;\n  /**\n   * Provides haptic feedback when toggling the switch\n   * @see https://docs.expo.io/versions/latest/sdk/haptics/\n   */\n  haptic?: boolean;\n  /**\n   * Duration in ms for thumb animated position\n   */\n  duration?: Animated.TimingAnimationConfig['duration'];\n}\n\n/**\n * ## Text\n * Default usage:\n * ```\n * <Text>...</Text>\n * ```\n *\n */\nexport interface ITextProps extends TextProps, ISpacing {\n  /**\n   * id for testID & accesibilityLabel\n   */\n  id?: string;\n  /**\n   * Renders a Text with predefined textAlign: center\n   * @see https://reactnative.dev/docs/text-style-props#textalign\n   */\n  center?: boolean;\n  /**\n   * Renders LinearGradient component, colors\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  gradient?: string[];\n  /**\n   * Renders a Text color directly from the colors.primary value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  primary?: boolean;\n  /**\n   * Renders a Text color directly from the colors.secondary value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  secondary?: boolean;\n  /**\n   * Renders a Text color directly from the colors.tertiary value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  tertiary?: boolean;\n  /**\n   * Renders a Text color directly from the colors.black value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  black?: boolean;\n  /**\n   * Renders a Text color directly from the colors.white value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  white?: boolean;\n  /**\n   * Renders a Text color directly from the colors.gray value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  gray?: boolean;\n  /**\n   * Renders a Text color directly from the colors.danger value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  danger?: boolean;\n  /**\n   * Renders a Text color directly from the colors.warning value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  warning?: boolean;\n  /**\n   * Renders a Text color directly from the colors.success value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  success?: boolean;\n  /**\n   * Renders a Text color directly from the colors.info value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  info?: boolean;\n  /**\n   * Renders a Text custom color value\n   * @see https://reactnative.dev/docs/text-style-props#color\n   */\n  color?: TextStyle['color'];\n  /**\n   * Renders a Text with custom opacity value\n   * @see https://reactnative.dev/docs/view-style-props#opacity\n   */\n  opacity?: TextStyle['opacity'];\n  /**\n   * Renders a Text with custom fontSize\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  size?: ITheme['sizes'] | string | number;\n  /**\n   * Renders a Text with custom fontWeight\n   * @see https://reactnative.dev/docs/text-style-props#fontweight\n   */\n  weight?: TextStyle['fontWeight'];\n  /**\n   * Renders a Text with custom fontFamily\n   * @see https://reactnative.dev/docs/text-style-props#fontfamily\n   */\n  font?: string;\n  /**\n   * Renders a Text with predefined fontFamily from theme fonts.bold\n   * @see https://reactnative.dev/docs/text-style-props#fontfamily\n   */\n  bold?: boolean;\n  /**\n   * Renders a Text with predefined fontFamily from theme fonts.semibold\n   * @see https://reactnative.dev/docs/text-style-props#fontfamily\n   */\n  semibold?: boolean;\n  /**\n   * Renders LinearGradient start points\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  start?: LinearGradientPoint;\n  /**\n   * Renders LinearGradient end points\n   * @see https://docs.expo.io/versions/latest/sdk/linear-gradient/#props\n   */\n  end?: LinearGradientPoint;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.h1\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  h1?: boolean;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.h2\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  h2?: boolean;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.h3\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  h3?: boolean;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.h4\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  h4?: boolean;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.h5\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  h5?: boolean;\n  /**\n   * Renders a Text with predefined fontSize from theme sizes.p\n   * @see https://reactnative.dev/docs/text-style-props#fontsize\n   */\n  p?: boolean;\n  /**\n   * Renders a Text with custom textAlign\n   * @see https://reactnative.dev/docs/text-style-props#textalign\n   */\n  align?: TextStyle['textAlign'];\n  /**\n   * Renders a Text with custom textTransform: 'none', 'uppercase', 'lowercase', 'capitalize'\n   * @see https://reactnative.dev/docs/text-style-props#texttransform\n   */\n  transform?: TextStyle['textTransform'];\n  /**\n   * Renders a Text with custom lineHeight\n   * @see https://reactnative.dev/docs/text-style-props#lineheight\n   */\n  lineHeight?: TextStyle['lineHeight'];\n  /**\n   * Renders text right offset\n   * @see https://reactnative.dev/docs/layout-props#right\n   */\n  right?: TextStyle['right'];\n  /**\n   * Renders the View left offset\n   * @see https://reactnative.dev/docs/layout-props#left\n   */\n  left?: TextStyle['left'];\n  /**\n   * Renders the View top offset\n   * @see https://reactnative.dev/docs/layout-props#top\n   */\n  top?: TextStyle['top'];\n  /**\n   * Renders the View bottom offset\n   * @see https://reactnative.dev/docs/layout-props#bottom\n   */\n  bottom?: TextStyle['bottom'];\n  /**\n   * Renders text position\n   * @see https://reactnative.dev/docs/layout-props#position\n   */\n  position?: TextStyle['position'];\n  /**\n   * Renders a Text component to display text\n   * Supports nesting, styling, and touch handling.\n   * @see https://reactnative.dev/docs/text\n   */\n  children?: React.ReactNode;\n  /**\n   * Renders the Text component with custom style, overwrite existing/predefined styles\n   * @see https://reactnative.dev/docs/text#style\n   */\n  style?: TextStyle;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}